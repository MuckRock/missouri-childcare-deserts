group_by(zcta, year, type) %>%
summarize(total = sum(amount)) %>%
left_join(childcare_aware_2021_2022, by = c("zcta", "year")) %>%
mutate(status = case_when(is.na(ratio) ~ "non-desert", TRUE ~ "desert")) %>%
group_by(type, status) %>%
summarize(total = sum(total)) %>%
pivot_wider(names_from = status, values_from = total)
View(relief_to_desert_type_join)
View(total)
View(relief_to_desert_join)
View(relief_to_desert_join)
View(childcare_aware_2021_2022)
View(childcare_aware_2023)
# Filter the capacity deserts to data from 2021 and 2022, aggregate the bi-yearly data to yearly, and remove non-desert zctas
childcare_aware_2021_2022 <- childcare_aware %>%
select(zcta, year, month, licensed_capacity, pop_5_and_under) %>%
filter(year %in% c("2021", "2022")) %>%
group_by(zcta, year)
# Filter the capacity deserts to data from 2021 and 2022, aggregate the bi-yearly data to yearly, and remove non-desert zctas
childcare_aware_2021_2022 <- childcare_aware %>%
select(zcta, year, month, licensed_capacity, pop_5_and_under) %>%
filter(year %in% c("2021", "2022")) %>%
group_by(zcta, year)  %>%
summarize(ratio = sum(pop_5_and_under, na.rm = TRUE) / sum(licensed_capacity, na.rm = TRUE)) %>%
filter(ratio >= 3)  %>%
mutate(zcta = as.character(zcta))
# This join is for all funding together
relief_to_desert_join <- relief_zcta %>%
group_by(zcta, year) %>%
summarize(total = sum(amount)) %>%
left_join(childcare_aware_2021_2022, by = c("zcta", "year")) %>%
mutate(status = case_when(is.na(ratio) ~ "non-desert", TRUE ~ "desert"))
# The big reveal
total_desert_relief <-  relief_to_desert_join %>%
group_by(status) %>%
summarize(total = sum(total))
View(total)
# Filter the capacity deserts to data from 2021 and 2022, aggregate the bi-yearly data to yearly, and remove non-desert zctas
childcare_aware_2021_2022 <- childcare_aware %>%
select(zcta, year, month, licensed_capacity, pop_5_and_under) %>%
filter(year %in% c("2021", "2022")) %>%
group_by(zcta, year)  %>%
summarize(ratio = sum(pop_5_and_under, na.rm = TRUE) / sum(licensed_capacity, na.rm = TRUE), pop_5_and_under = mean(pop_5_and_under)) %>%
filter(ratio >= 3)  %>%
mutate(zcta = as.character(zcta))
View(childcare_aware)
# This join is for all funding together
relief_to_desert_join <- relief_zcta %>%
group_by(zcta, year) %>%
summarize(total = sum(amount)) %>%
left_join(childcare_aware_2021_2022, by = c("zcta", "year")) %>%
mutate(status = case_when(is.na(ratio) ~ "non-desert", TRUE ~ "desert"))
library(tidyverse)
library(tidycensus)
library(janitor)
library(readxl)
library(here)
# The code below caches the zip code tabulation data we want from the Census
options(tigris_use_cache = TRUE)
# Check out variables for 2017-2021 5-year ACS and find the ones we want
# These variables are part of the grouping "Population Under 18 Years by Age"
variables <- load_variables(2021, "acs5", cache = TRUE)
View(variables)
# Get the 2017-2021 5-year ACS ZTCAs for the whole US so that we can join these with zip codes and get geoms for mapping
zcta_geoms <- get_acs(geography = "zip code tabulation area", variables = "B19013_001", geometry = TRUE)  %>%
select(GEOID, geometry)
# Get the 2017-2021 5-year ACS ZTCAs for the whole US so that we can join these with zip codes and get geoms for mapping
# B19013_001
zcta_geoms <- get_acs(geography = "zip code tabulation area", variables = "B09001_005", geometry = TRUE)  %>%
select(GEOID, geometry)
# JOIN CROSSWAKLED DATA WITH GEOM FOR MAPPING
# Now we can use zctas to get geoms for mapping
# Get the 2017-2021 5-year ACS ZTCAs for the whole US so that we can join these with zip codes and get geoms for mapping
# B09001_005 is a dummy variable, we just need the geoms from the call
zcta_geoms <- get_acs(geography = "zip code tabulation area", variables = "B09001_005", geometry = TRUE)  %>%
select(GEOID, geometry)
library(tidyverse)
library(janitor)
library(readxl)
library(tidycensus)
library(here)
library(sf)
library(lubridate)
library(tmap)
library(DT)
# Cache the zip code tabulation data we want from the Census
options(tigris_use_cache = TRUE)
# Sets tmap to interactive mode
tmap_mode("view")
# LOAD DATA
# Load clean and crosswalked data for all zctas from ChildCareAware survey
# There are 475 unique zctas for 2023 in the data
childcare_aware <- read_csv(here("data", "processed", "ChildCareAware_cleaned_and_crosswalked.csv")) %>%
mutate(zcta = as.character(zcta))
childcare_aware_2023 <- childcare_aware %>%
filter(year == 2023)
# Load all zctas not included in ChildCareAware survey
# There are 1023 unique zctas in MO according to these crosswalk
mo_zctas <- read_excel(here("data", "raw", "ZIPCodetoZCTACrosswalk2021UDS.xlsx"), sheet = 1) %>%
clean_names() %>%
filter(state == "MO") %>%
distinct(zcta)
# 5 year ACS estimates pf population five and under for all zctas in the country
acs <- read_csv(here("data", "processed", "pop_zcta_5acs.csv"))
crrsa_startup_expansion <-  read_excel(here("data","raw", "CRRSA Startup and Expansion with Paid.xlsx")) %>%
clean_names()
# Load all relief data with cleaned zips and years for when and where money was dispersed to
relief_funding <- read_csv(here("data", "processed", "all_relief_cleaned.csv")) %>%
mutate(zip = as.character(zip))
# Zip code to zcta crosswalk file from UDS Mapper
zip_zcta_crosswalk <- read_excel(here("data", "raw", "ZIPCodetoZCTACrosswalk2021UDS.xlsx"), sheet = 1) %>%
clean_names()
# Join crosswalk with relief funding zips to that each zip matches a zcta to correspond to desert data
# Success! All zips found a zcta
relief_zcta <- relief_funding %>%
inner_join(zip_zcta_crosswalk, by = c("zip" = "zip_code"))
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(mo_zctas, by = "zcta") %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(is.na(ratio) ~ "non-desert", ratio < 3 ~ "non-desert", ratio >= 3 & ratio < 10 ~ "desert", ratio >= 10 ~ "extreme", TRUE ~ "test")) %>%
mutate(status_num = case_when(is.na(ratio) ~ 0, ratio < 3 ~ 0, ratio >= 3 & ratio < 10 ~ 1, ratio >= 10 ~ 2, TRUE ~ 0)) %>%
select(zcta, status, status_num, ratio)
# JOIN CROSSWAKLED DATA WITH GEOM FOR MAPPING
# Now we can use zctas to get geoms for mapping
# Get the 2017-2021 5-year ACS ZTCAs for the whole US so that we can join these with zip codes and get geoms for mapping
# B09001_005 is a dummy variable, we just need the geoms from the call
zcta_geoms <- get_acs(geography = "zip code tabulation area", variables = "B09001_005", geometry = TRUE)  %>%
select(GEOID, geometry)
# Join the survey and non-survey data with geoms from Census for mapping
# This join to zcta geoms from ACS data drops 5 values, but anti join shows they are all non-deserts and "point" zctas for PO boxes
map_df_sf <- map_df %>%
inner_join(zcta_geoms, by = c("zcta" = "GEOID")) %>%
st_as_sf(sf_column_name = "geometry")
#| output: true
# MAP DATA
tm_shape(map_df_sf) +
tm_polygons("status_num",
palette = "Reds",
legend.show = FALSE)
deserts_2023 <- childcare_aware %>%
select(zcta, year, month, licensed_capacity, pop_5_and_under) %>%
filter(year == "2023") %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
filter(ratio >= 3)
# 171,048 in 227 zctas that are childcare deserts
sum(deserts_2023$pop_5_and_under)
# Same five ZCTAs didn't join, but again, these are non-deserts PO boxes anyway
mo_zctas_with_pop <- mo_zctas %>%
left_join(acs, by = c("zcta" = "GEOID")) %>%
select(zcta, pop_5_and_under)
#  442,254 children under 5 or under across the state
sum(mo_zctas_with_pop$pop_5_and_under, na.rm=TRUE)
#| output: true
#| column: page
datatable(deserts_2023, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
#| output: true
#| column: page
datatable(mo_zctas_with_pop, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
yearly_deserts <- childcare_aware %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
filter(ratio >= 3) %>%
group_by(year, month) %>%
summarize(children_in_deserts = sum(pop_5_and_under))
num_programs_yearly <- childcare_aware %>%
group_by(year, month) %>%
summarize(num_program = sum(childcare_programs))
#| output: true
#| column: page
datatable(yearly_deserts, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
#| output: true
#| column: page
datatable(num_programs_yearly, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
age_breakouts <- crrsa_startup_expansion %>%
select(number_of_infant_toddler_slots_adding, number_of_preschool_slots_adding, number_of_school_age_slots_adding) %>%
mutate_all(~replace(., is.na(.), 0)) %>%
pivot_longer(number_of_infant_toddler_slots_adding:number_of_school_age_slots_adding, names_to = "age_group", values_to = "number")%>%
group_by(age_group) %>%
summarize(number = sum(number))
#| output: true
#| column: page
datatable(age_breakouts, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
real_capacity <- crrsa_startup_expansion %>%
select(dvn, at_startup, number_of_infant_toddler_slots_adding, number_of_preschool_slots_adding, number_of_school_age_slots_adding, total_anticipated_capacity) %>%
mutate(slots = number_of_infant_toddler_slots_adding + number_of_preschool_slots_adding + number_of_school_age_slots_adding) %>%
filter(slots > total_anticipated_capacity)
#| output: true
#| column: page
datatable(real_capacity, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
# Filter the capacity deserts to data from 2021 and 2022, aggregate the bi-yearly data to yearly, and remove non-desert zctas
childcare_aware_2021_2022 <- childcare_aware %>%
select(zcta, year, month, licensed_capacity, pop_5_and_under) %>%
filter(year %in% c("2021", "2022")) %>%
group_by(zcta, year)  %>%
summarize(ratio = sum(pop_5_and_under, na.rm = TRUE) / sum(licensed_capacity, na.rm = TRUE), pop_5_and_under = mean(pop_5_and_under)) %>%
filter(ratio >= 3)  %>%
mutate(zcta = as.character(zcta))
# This join is for all funding together
relief_to_desert_join <- relief_zcta %>%
group_by(zcta, year) %>%
summarize(total = sum(amount)) %>%
left_join(childcare_aware_2021_2022, by = c("zcta", "year")) %>%
mutate(status = case_when(is.na(ratio) ~ "non-desert", TRUE ~ "desert"))
# The big reveal
total_desert_relief <-  relief_to_desert_join %>%
group_by(status) %>%
summarize(total = sum(total))
#| output: true
#| column: page
datatable(total_desert_relief, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
# This join is for funding my source
relief_to_desert_type_join <- relief_zcta %>%
group_by(zcta, year, type) %>%
summarize(total = sum(amount)) %>%
left_join(childcare_aware_2021_2022, by = c("zcta", "year")) %>%
mutate(status = case_when(is.na(ratio) ~ "non-desert", TRUE ~ "desert")) %>%
group_by(type, status) %>%
summarize(total = sum(total)) %>%
pivot_wider(names_from = status, values_from = total)
#| output: true
#| column: page
datatable(relief_to_desert_type_join, filter = 'top', class = 'cell-border stripe order-column', extensions = 'Buttons',
options = list(
paging = TRUE,
searching = TRUE,
fixedColumns = TRUE,
autoWidth = TRUE,
ordering = TRUE,
dom = 'tB',
buttons = c('copy', 'csv', 'excel')
))
View(map_df)
write.csv("map_df", "data/processed/datawrapper_map.csv")
getwd()
setwd("C:/Users/newsd/home/code/missouri-childcare-deserts")
write.csv
write.csv("map_df", "data/processed/datawrapper_map.csv")
getwd()
write_csv("map_df", "data/processed/datawrapper_map.csv")
write.csv("map_df", "data/processed/datawrapper_map.csv")
write.csv("map_df", "data/processed/datawrapper_map.csv")
write.csv("map_df", "datawrapper_map.csv")
View(relief_to_desert_type_join)
write.csv("relief_to_desert_type_join", "datwrapper_stacked_bars.csv")
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(mo_zctas, by = "zcta") %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(is.na(ratio) ~ "non-desert", ratio < 3 ~ "non-desert", ratio >= 3 & ratio < 10 ~ "desert", ratio >= 10 ~ "extreme", TRUE ~ "test")) %>%
mutate(status_num = case_when(is.na(ratio) ~ 0, ratio < 3 ~ 0, ratio >= 3 & ratio < 10 ~ 1, ratio >= 10 ~ 2, TRUE ~ 0)) %>%
select(zcta, status, status_num, ratio)
write.csv("map_df", "datawrapper_map.csv")
csv("map_df", file = "datawrapper_map.csv")
write.csv("map_df", file = "datawrapper_map.csv")
library(rio)
export("map_df", "datawrapper_map.csv")
View(map_df)
getwd()
write.csv(map_df, "data/processed/datawrapper_map.csv")
write.csv(map_df, "datawrapper_map.csv")
write.csv(relief_to_desert_type_join, "datwrapper_stacked_bars.csv")
View(map_df)
View(childcare_aware_2023)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(mo_zctas, by = "zcta") %>%
mutate(ratio = pop_5_and_under / licensed_capacity)
View(map_df)
View(map_df_sf)
# Join MO ZCTAs with ACS data to catch zip codes with no providers but more than TK children
no_provider_join <- mo_zctas %>%
left_join(acs, by = c("zcta" = "GEOID")) %>%
select(zcta, pop_5_and_under)
View(no_provider_join)
View(map_df)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = "zcta") %>%
mutate(ratio = pop_5_and_under / licensed_capacity)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = "zcta")
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under"))
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
TRUE ~ "test"))
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "test"))
write.csv(map_df, "datawrapper_map.csv")
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert"))
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert")) %>%
mutate(status_num = case_when(status == "non-desert" ~ 0,
status == "desert" ~ 1,
status == "extreme" ~ 3)) %>%
select(zcta, status, status_num, ratio)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert"))
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert")) %>%
filter(licensed_capacity == 0 | is.na(licensed_capacity))
View(childcare_aware)
View(childcare_aware_2023)
View(childcare_aware)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert")) %>%
filter(licensed_capacity == 0 | is.na(licensed_capacity)) %>%
mutate(status_num = case_when(status == "non-desert" ~ 0,
status == "desert" ~ 1,
status == "extreme" ~ 3)) %>%
select(zcta, status, status_num, ratio)
# Get the 2017-2021 5-year ACS ZTCAs for the whole US so that we can join these with zip codes and get geoms for mapping
# B09001_005 is a dummy variable, we just need the geoms from the call
zcta_geoms <- get_acs(geography = "zip code tabulation area", variables = "B09001_005", geometry = TRUE)  %>%
select(GEOID, geometry)
# Join the survey and non-survey data with geoms from Census for mapping
# This join to zcta geoms from ACS data drops 5 values, but anti join shows they are all non-deserts and "point" zctas for PO boxes
map_df_sf <- map_df %>%
inner_join(zcta_geoms, by = c("zcta" = "GEOID")) %>%
st_as_sf(sf_column_name = "geometry")
#| output: true
# MAP DATA
tm_shape(map_df_sf) +
tm_polygons("status_num",
palette = "Reds",
legend.show = FALSE)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert")) %>%
filter(licensed_capacity == 0 | is.na(licensed_capacity)) %>%
mutate(status_num = case_when(status == "non-desert" ~ 0,
status == "desert" ~ 1,
status == "extreme" ~ 3)) %>%
select(zcta, status, status_num, ratio)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under"))
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert")) %>%
filter(licensed_capacity == 0 | is.na(licensed_capacity)) %>%
mutate(status_num = case_when(status == "non-desert" ~ 0,
status == "desert" ~ 1,
status == "extreme" ~ 3)) %>%
select(zcta, status, status_num, ratio)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under"))
View(map_df)
# Add back in all zctas not included in survey so that we can map them all together
map_df <-  childcare_aware_2023 %>%
right_join(no_provider_join, by = c("zcta", "pop_5_and_under")) %>%
mutate(ratio = pop_5_and_under / licensed_capacity) %>%
mutate(status = case_when(ratio < 3 ~ "non-desert",
ratio >= 3 & ratio < 10 ~ "desert",
ratio >= 10 ~ "extreme",
is.na(ratio) & pop_5_and_under >= 50 ~ "desert",
is.na(ratio) & pop_5_and_under < 50 ~ "non-desert",
TRUE ~ "non-desert")) %>%
mutate(status_num = case_when(status == "non-desert" ~ 0,
status == "desert" ~ 1,
status == "extreme" ~ 3)) %>%
select(zcta, status, status_num, ratio)
# Join the survey and non-survey data with geoms from Census for mapping
# This join to zcta geoms from ACS data drops 5 values, but anti join shows they are all non-deserts and "point" zctas for PO boxes
map_df_sf <- map_df %>%
inner_join(zcta_geoms, by = c("zcta" = "GEOID")) %>%
st_as_sf(sf_column_name = "geometry")
#| output: true
# MAP DATA
tm_shape(map_df_sf) +
tm_polygons("status_num",
palette = "Reds",
legend.show = FALSE)
write.csv(map_df, "datawrapper_map.csv")
